import sounddevice as sd
import numpy as np
import speech_recognition as sr

""" –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–æ "#" - def print wasapi devices """
def print_wasapi_devices():
    devices = sd.query_devices()
    wasapi_api_indices = [i for i, h in enumerate(sd.query_hostapis()) if h['name'] == 'Windows WASAPI']

    if not wasapi_api_indices:
        print("WASAPI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞ Windows.")
        return

    wasapi_api_index = wasapi_api_indices[0]

    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π WASAPI:")
    for idx, dev in enumerate(devices):
        if dev['hostapi'] == wasapi_api_index:
            print(f"ID: {idx}, Name: {dev['name']}, Max Output Channels: {dev['max_output_channels']}, Max Input Channels: {dev['max_input_channels']}")

def list_output_devices():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞ –∑–≤—É–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö loopback"""
    devices = sd.query_devices()
    output_devices = {}
    wasapi_hostapis = [i for i, h in enumerate(sd.query_hostapis()) if h['name'] == 'Windows WASAPI']

    if not wasapi_hostapis:
        print("WASAPI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞ Windows.")
        return output_devices

    wasapi_api_index = wasapi_hostapis[0]

    for i, dev in enumerate(devices):
        if dev["max_output_channels"] > 0 and dev["hostapi"] == wasapi_api_index:
            output_devices[i] = dev["name"]
    return output_devices

def get_audio_level(device_index, sample_rate=48000):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∑–≤—É–∫–∞ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞"""
    try:
        wasapi_info = sd.WasapiSettings(exclusive=False)
        wasapi_info.loopback = True

        device_info = sd.query_devices(device_index, 'output')
        channels = int(device_info['max_output_channels'])
        print(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{device_info['name']}' –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç {channels} –∫–∞–Ω–∞–ª–æ–≤ –≤—ã–≤–æ–¥–∞.")

        sd.check_input_settings(device=device_index, channels=channels, samplerate=sample_rate,
                                extra_settings=wasapi_info)

        with sd.InputStream(device=device_index, channels=channels, samplerate=sample_rate,
                            extra_settings=wasapi_info) as stream:
            data, _ = stream.read(1024)
            volume_norm = np.linalg.norm(data) * 10
            return int(volume_norm)
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞: {e}")
        return 0


def capture_audio_from_output(device_index, duration=5, sample_rate=48000):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–≤—É–∫ —Å –≤—ã—Ö–æ–¥–∞ (–¥–∏–Ω–∞–º–∏–∫–æ–≤)"""
    try:
        wasapi_info = sd.WasapiSettings(exclusive=False)
        wasapi_info.loopback = True

        device_info = sd.query_devices(device_index, 'output')
        channels = int(device_info['max_output_channels'])
        print(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{device_info['name']}' –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç {channels} –∫–∞–Ω–∞–ª–æ–≤ –≤—ã–≤–æ–¥–∞.")

        sd.check_input_settings(device=device_index, channels=channels, samplerate=sample_rate,
                                extra_settings=wasapi_info)

        with sd.InputStream(device=device_index, channels=channels, samplerate=sample_rate, dtype='int16',
                            extra_settings=wasapi_info) as stream:
            audio_data = stream.read(int(duration * sample_rate))[0]
        sd.wait()

        recognizer = sr.Recognizer()
        audio = sr.AudioData(audio_data.tobytes(), sample_rate, channels)

        try:
            return recognizer.recognize_google(audio, language="ru-RU")
        except sr.UnknownValueError:
            return "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
        except sr.RequestError:
            return "‚ö† –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Google API"
    except Exception as e:
        return f"üö® –û—à–∏–±–∫–∞: {e}"


""" print - def print_wasapi_devices(): """
if __name__ == '__main__':
    print_wasapi_devices()