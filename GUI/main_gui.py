import os
from PyQt6.QtWidgets import (
    QWidget, QPushButton, QVBoxLayout, QLabel,
    QComboBox, QLineEdit, QCheckBox, QProgressBar, QTimer
)
from GUI.func_gui import save_api_key
from voice_questions.voice_func import capture_audio_from_output, list_output_devices, get_audio_level

CONFIG_FILE = "config.py"
API_KEY = ""

if os.path.exists(CONFIG_FILE):
    try:
        from config import OPENAI_API_KEY
        API_KEY = OPENAI_API_KEY
    except ImportError:
        API_KEY = ""

class SimpleApp(QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ API-–∫–ª—é—á–æ–º")
        self.setGeometry(100, 100, 400, 450)

        self.label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞ –∑–≤—É–∫–∞", self)
        self.device_combo = QComboBox(self)
        self.populate_audio_devices()

        self.api_button = QPushButton("–í—Å—Ç–∞–≤–∏—Ç—å API –∫–ª—é—á OpenAI", self)
        self.api_button.clicked.connect(self.show_api_key_input)

        self.api_input = QLineEdit(self)
        self.api_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á")
        self.api_input.setText(API_KEY)
        self.api_input.hide()

        self.save_checkbox = QCheckBox("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å API –∫–ª—é—á", self)
        self.save_checkbox.hide()

        self.save_api_button = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self)
        self.save_api_button.hide()
        self.save_api_button.clicked.connect(self.on_save_api_key)

        self.volume_bar = QProgressBar(self)
        self.volume_bar.setMinimum(0)
        self.volume_bar.setMaximum(100)

        self.listen_button = QPushButton("–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–≤—É–∫", self)
        self.listen_button.clicked.connect(self.handle_system_audio)

        self.text_output = QLabel("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å", self)

        self.audio_timer = QTimer(self)
        self.audio_timer.timeout.connect(self.update_audio_level)

        layout = QVBoxLayout()
        layout.addWidget(self.label)
        layout.addWidget(self.device_combo)
        layout.addWidget(self.api_button)
        layout.addWidget(self.api_input)
        layout.addWidget(self.save_checkbox)
        layout.addWidget(self.save_api_button)
        layout.addWidget(QLabel("üîä –£—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞:"))
        layout.addWidget(self.volume_bar)
        layout.addWidget(self.listen_button)
        layout.addWidget(self.text_output)

        self.setLayout(layout)

    def populate_audio_devices(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞"""
        self.device_combo.addItems(list_output_devices().values())

    def show_api_key_input(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞"""
        self.api_input.show()
        self.save_checkbox.show()
        self.save_api_button.show()

    def on_save_api_key(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç API –∫–ª—é—á"""
        save_api_key(self.api_input.text(), self.save_checkbox.isChecked(), self)

    def update_audio_level(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        selected_device_name = self.device_combo.currentText()
        devices = list_output_devices()
        selected_device_index = next((i for i, name in devices.items() if name == selected_device_name), None)

        if selected_device_index is not None:
            level = get_audio_level(selected_device_index)
            self.volume_bar.setValue(level)

    def handle_system_audio(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞"""
        selected_device_name = self.device_combo.currentText()
        devices = list_output_devices()
        selected_device_index = next((i for i, name in devices.items() if name == selected_device_name), None)

        if selected_device_index is not None:
            self.audio_timer.start(100)
            text = capture_audio_from_output(selected_device_index)
            self.audio_timer.stop()
            self.text_output.setText(text)
